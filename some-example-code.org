#+PROPERTY: header-args:R  :results output verbatim  :exports code  :session *R* :cache yes

* Setup some data
Packages we use
#+BEGIN_SRC R :results none
  library(riskRegression)
  library(gam)
  library(data.table)
  library(randomForestSRC)
#+END_SRC

Construct a small data sample to play with. The full data set should first be loaded as =pph=.

#+BEGIN_SRC R
  covariates_binary <- names(pph)[grepl("Prev", names(pph))][c(1,11:14)]
  covariates_cont <- c("MAlder", "PrevYearOfDelivery")
  covariates <- c(covariates_binary, covariates_cont)
  outcome_var <- "PPHbin"

  ## Get subsample to play with
  set.seed(341)
  toy_data <- pph[sample(1:.N, size = 7000), c(covariates, outcome_var), with = FALSE]
  for (nn in c(covariates_binary,outcome_var)) set(toy_data, j = nn, value = factor(toy_data[[nn]]))
#+END_SRC

* Fit and some model

** Manual cross validation
Fit some models, e.g., using glm, splines, random forest, etc. Evaluate the performance using the
Brier score.

#+BEGIN_SRC R
  ## Split data using tool from riskRegression package
  splits <- getSplitMethod("cv5", N = toy_data[, .N], seed = 42)

  ## Fit some models and get predictions on test set.
  model_preds <- do.call(rbind, lapply(1:splits$k, function(fold.k){
    train_data = toy_data[splits$index[,1] != fold.k]
    test_data = toy_data[splits$index[,1] == fold.k]
    form0 <- formula(paste(outcome_var, "~", paste(covariates_binary, collapse = "+")))
    form <- update(form0, paste(".~.+", paste(covariates_cont, collapse = "+")))
    model_fits <- list(glm = glm(form,data=train_data, family="binomial"),
		       spline = gam(update(form0, paste(".~.+", paste("s(", paste0(covariates_cont, ", 3)"), collapse = "+"))), data=train_data,family="binomial"),
		       rf_big = rfsrc(form,mtry = 3, nodesize = 10,data=train_data),
		       rf_small = rfsrc(form,mtry = 7, nodesize = 1,data=train_data))
    do.call(rbind, lapply(seq_along(model_fits), function(mm){
      copy(test_data)[, ":="(model = names(model_fits)[mm], fold = fold.k, risk_pred = predictRisk(model_fits[[mm]], newdata = test_data))]
    }))
  }))

  ## Calculate the Brier score
  model_preds[, .(Brier_score = 100*mean((risk_pred - (get(outcome_var) == "Yes"))^2)), model]

  ## ## Visualize predictions
  ## model_preds[, boxplot(risk_pred ~ model)]
  ## plot(model_preds[model == "rf_big", risk_pred], model_preds[model == "rf_small",risk_pred])
#+END_SRC

** Using the =riskRegression= package
Can also use the =score= function from the =riskRegression= package. Bootstraps the data instead and
validates the model on the out-of-bag data. 

#+BEGIN_SRC R :results none
  form0 <- formula(paste(outcome_var, "~", paste(covariates_binary, collapse = "+")))
  form <- update(form0, paste(".~.+", paste(covariates_cont, collapse = "+")))
  model_fits <- list(glm = glm(form,data=toy_data, family="binomial"),
		     spline = gam(update(form0, paste(".~.+", paste("s(", paste0(covariates_cont, ", 3)"), collapse = "+"))), data=toy_data,family="binomial"),
		     rf_small = rfsrc(form,mtry = 3, nodesize = 10,data=toy_data),
		     rf_big = rfsrc(form,mtry = 7, nodesize = 1,data=toy_data))
  model_scores <- Score(model_fits,formula = formula(paste0(outcome_var, "~1")),data = toy_data,split.method = "bootcv",B = 10)
#+END_SRC

* Average treatment effect

