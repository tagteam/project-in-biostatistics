out.plot
lapply(sprintf(r'($\alpha = %d$)', alpha), TeX)
lapply(sprintf(r'($\alpha = %d$)', 1:5), TeX)
list(TeX("$\\log(\\lambda)$"), TeX("$\\log(\\lambda)$"))
sim.dat(10)
sim.dat(1000)[, mean(Y1) - mean(Y0)]
sim.dat(1000)[, mean(Y1) - mean(Y0)]
tt0 <- sim.dat(1000); tt0[A == 1, mean(Y)]-tt0[A == 0, mean(Y)]
tt0 <- sim.dat(1000); tt0[A == 1, mean(Y)]-tt0[A == 0, mean(Y)]
tt0 <- sim.dat(1000); tt0[A == 1, mean(Y)]-tt0[A == 0, mean(Y)]
tt0 <- sim.dat(1000); tt0[A == 1, mean(Y)]-tt0[A == 0, mean(Y)]
sim.dat(1000)[, table(A)]
tt0 <- sim.dat(10000); tt0[A == 1, mean(Y)]-tt0[A == 0, mean(Y)]
tt0 <- sim.dat(10000); tt0[A == 1, mean(Y)]-tt0[A == 0, mean(Y)]
tt0 <- sim.dat(10000); tt0[A == 1, mean(Y)]-tt0[A == 0, mean(Y)]
tt0 <- sim.dat(10000); tt0[A == 1, mean(Y)]-tt0[A == 0, mean(Y)]
sim.dat(10)
summary(true.m)
tt0 <- sim.dat(10000); tt0[A == 1, mean(Y)]-tt0[A == 0, mean(Y)]
tt0 <- sim.dat(10000); tt0[A == 1, mean(Y)]-tt0[A == 0, mean(Y)]
tt0 <- sim.dat(10000); tt0[A == 1, mean(Y)]-tt0[A == 0, mean(Y)]
tt0 <- sim.dat(10000); tt0[A == 1, mean(Y)]-tt0[A == 0, mean(Y)]
tt0 <- sim.dat(10000); tt0[A == 1, mean(Y)]-tt0[A == 0, mean(Y)]
sim.dat(1000)[, table(A)]
sim.dat(10000)[, mean(Y1)-mean(Y0)]
sim.dat(10000)[, mean(Y1)-mean(Y0)]
tt0 <- sim.dat(10000); tt0[A == 1, mean(Y)]-tt0[A == 0, mean(Y)]
tt0 <- sim.dat(10000); tt0[A == 1, mean(Y)]-tt0[A == 0, mean(Y)]
tt0 <- sim.dat(10000); tt0[A == 1, mean(Y)]-tt0[A == 0, mean(Y)]
rm(train.dat)
tt0[model == "true"]
tt0[model == "true", quantile(fit, probs = c(0.025, 0.975))]
sim.dat()[, table(A)]
tt0
tt0[parameter == nuisance.msefit, .(mean.mse=mean(fit)), lambda]
tt0[parameter == "nuisance.msefit", .(mean.mse=mean(fit)), lambda]
tt0[parameter == "nuisance.msefit", .(mean.mse=mean(fit)), lambda][which.min(mean.mse)]
tt0[parameter == "nuisance.msefit", .(mean.mse=mean(fit)), lambda][which.min(mean.mse), log(lambda)]
tt0[parameter == "nuisance.msefit", .(mean.mse=mean(fit)), lambda][which.min(mean.mse), log(lambda)]
tt0[parameter == "nuisance.msefit", .(mean.mse=mean(fit)), lambda][which.min(mean.mse)]
tt0[parameter == "nuisance.msefit", .(mean.mse=mean(fit)), lambda][which.min(mean.mse), log(lambda)]
q()
